'.text.html':
  'view form':
    prefix: 'vf'
    body: '<form action="<%= ${1:model_url} %>" method="${2:get}">\n</form>'

  'submit tag':
    prefix: 'vfs'
    body: '<input type="submit" value="Create ${1:Model!}">'
    
  'view form new':
    prefix: 'vfn'
    body: '<form action="<%= ${1:model_url} %>" method="${2:post}">
    \n
    \n  $4
    \n
    \n  <input type="submit" value="Create ${3:Model!}">
    \n</form>'

  'view form update':
    prefix: 'vfu'
    body: '<form action="<%= ${1:model_url} %>" method="${2:post}">
    \n  <input type="hidden" name="_method" value = "patch"/>
    \n
    \n  $4
    \n
    \n  <input type="submit" value="Edit ${3:Model!}">
    \n</form>'

  'input text':
    prefix: 'it'
    body: '<label for="${1:input_id}">${2:label_name}</label>\n<input type="text" name="${3:model_name}[${4:param_name}]" value="<%= @${5:model_name}.${6:attr_name} %>" id="${1:input_id}">'

  'csrf injection':
    prefix: 'csrf'
    body: '<%= csrf_token %>'

  'input password':
    prefix: 'ip'
    body: '<label for="${1:password}">${2:Password:}</label>\n<input type="password" name="${3:user}[${4:password}]" id="${1:password}">'

  'input radio':
    prefix: 'ir'
    body: '<input \n  type="radio"  \n  name="${1:model_name}[${2:param_name}]"
    \n  value="${3:value}" \n  id="${4:input_id}"
    \n  <%= ${1:model_name}.${2:param_name} == "${3:value}" ? "checked" : "" %>>
    \n<label for="${4:input_id}">${5:label_name}</label>'

  'input dropdown':
    prefix: 'drp'
    body: '<label for="${1:input_id}">${2:LabelName}</label>
    \n<select \n  name="${3:model_name}[${4:param_name}]" \n  id="${1:input_id}">
    \n</select>'

  'patch input':
    prefix: 'patch'
    body: '<input type="hidden" name="_method" value = "patch"/>'

  'render partial':
    prefix: 'rnp'
    body: '<%= render "$1" %>'
    
  'error function':
    prefix: 'error'
    body: '<%= flash[:errors].join("<br>").html_safe if flash[:errors] %>'

'.source.ruby':
  #auth stuff
  'csrf function':
    prefix: 'csrf'
    body: 'def csrf_token\n
  "<input
  type=\'hidden\'
  name=\'authenticity_token\'
  value=\'#{form_authenticity_token}\'>".html_safe\n
  end'

  'Password digest':
    prefix: 'digest'
    body: 'self.${1:password_digest} = BCrypt::Password.create(password)'

  'Password comparison':
    prefix: 'cpwd'
    body: 'BCrypt::Password.new(self.password_digest).is_password?(password)'

  'flash.now error':
    prefix: 'fne'
    body: 'flash.now[:errors] =  @${1:model_name}.errors.full_messages'

  'flash error':
    prefix: 'fe'
    body: 'flash[:errors] = @${1:model_name}.errors.full_messages'

  'flash generic':
    prefix: 'fg'
    body: 'flash[:${1:param_name}] = @${2:model_name}.${3:flash_type}'

  'flash.now generic':
    prefix: 'fng'
    body: 'flash.now[:${1:param_name}] = @${2:model_name}.${3:flash_type}'

  'session token':
    prefix: 'token'
    body: 'SecureRandom.urlsafe_base64(16)'

  'controller create':
    prefix: 'cc'
    body: '''def create
               @${1:model_name} = ${2:ModelClass}.new(${1:model_name}_params)
               if @${1:model_name}.save
                 redirect_to ${1:model_name}_url(@${1:model_name})
               else
                 flash[:errors] = @${1:model_name}.errors.full_messages
                 render :new
               end
             end
             $3'''

  'controller new':
    prefix: 'cn'
    body: '''def new
               @${1:model_name} = ${2:ModelClass}.new
               render :new
             end
             $3'''

  'controller index':
    prefix: 'ci'
    body: '''def index
               @${1:model_name}s = ${2:ModelClass}.all
               render :index
             end
             $3'''

   'controller show':
     prefix: 'cs'
     body: '''def show
                @${1:model_name} = ${2:ModelClass}.find(params[:id])
                render :show
              end
              $3'''

  'controller edit':
    prefix: 'ce'
    body: '''def edit
               @${1:model_name} = ${2:ModelClass}.find(params[:id])
               render :edit
             end
             $3'''

  'controller update':
    prefix: 'cu'
    body: '''def update
               @${1:model_name} = ${2:ModelClass}.find(params[:id])
               if @${1:model_name}.update_attributes(${1:model_name}_params)
                 redirect_to ${1:model_name}_url(@${1:model_name})
               else
                 flash[:errors] = @${1:model_name}.errors.full_messages
                 render :edit
               end
             end
             $3'''

  'controller destroy':
    prefix: 'cd'
    body: '''def destroy
               @${1:model_name} = ${2:ModelClass}.find(params[:id])
               @${1:model_name}.destroy
               redirect_to ${1:model_name}s_url
             end
             $3'''

  'params function':
    prefix: 'prm'
    body: 'def ${1:model_name}_params\n  params.require(:${1:model_name}).permit(:${2:first_param_name})
    \nend'

  'redirect to view':
      prefix: 'rdt'
      body: 'redirect_to ${1:models}_url'
